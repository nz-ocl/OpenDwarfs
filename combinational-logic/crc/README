Cyclic Redundancy Check
=======================

Status: Beta

Cyclic Redundancy Check (CRC) is an error-detecting code which is designed to
detect errors caused by network transmission or any other accidental error.
Specifically, CRC is designed to catch burst errors in data that is transfered.
Polynomial division is performed on the data stream S by the CRC polynomial.
This polynomial is predetermined.  The remainder from this division is the CRC
value.  This value is typically added to the end of the data stream as it is
sent out.  When the reciever divides the recieved datastream, the division will
return no remainder on a successful transmission.

This application computes a 32-bit Ethernet standard CRC using the "Slice-by-8"
algorithm published by Intel.

Running
-------

crc -i <input_file> [hvpw] [-r <num_execs>] [-w <wg_size-1>][-w <wg_size-2>]...[-w <wg_size-m>] [-k <kernel_file-1>][-k <kernel_file-2>]...[-k <kernel_file-n>]
	
	-h | 'Print this help message'
	-v | 'Increase verbosity level by 1 - Default is 0 - Max is 2'
	-i | 'Input file name' [string]
	-a | 'Verify results on CPU'
	-p | 'Set the number of pages to CRC in parallel (i.e., the global size of each kernel) - Default is 16
	-r | 'Execute program with same data exactly <num_execs> times to increase sample size - Default is 1
	-w | 'Loop through each kernel execution 'm' times, once with each wg_size-'1..m' - Default is 1 iteration with wg_size set to the maximum possible (limited either by the device or the size of the input)
	-k | 'Test CRC 'n' times, once with each kernel_file-'1..n' - Default is 1 kernel named './crc_kernel.xxx' where xxx is 'aocx' if USE_AFPGA is defined, 'cl' otherwise.

Example Usage
-------------

crc -v -a -i ../test/combinational-logic/crc/crcfile_N16_S1K


